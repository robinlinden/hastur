""" This comment is required for Buildifier to be happy. """

module(name = "hastur")

http_file = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_file")

# Bazel
# =========================================================

# https://github.com/bazelbuild/apple_support
bazel_dep(name = "apple_support", dev_dependency = True)  # Apache-2.0
archive_override(
    module_name = "apple_support",
    integrity = "sha256-7iDMXAurRwZUc8gDPUYjdN040XJAbsyN5cjwhIeUPy8=",
    url = "https://github.com/bazelbuild/apple_support/releases/download/{0}/apple_support.{0}.tar.gz".format("1.23.1"),
)

# https://github.com/bazelbuild/platforms
bazel_dep(name = "platforms")  # Apache-2.0
archive_override(
    module_name = "platforms",
    integrity = "sha256-M4TrHDB2JwT7445EAgThFBVAhsj8iowuPihEECjAGag=",
    url = "https://github.com/bazelbuild/platforms/releases/download/{0}/platforms-{0}.tar.gz".format("1.0.0"),
)

# https://github.com/bazelbuild/rules_apple
RULES_APPLE_VERSION = "4.2.0"

archive_override(
    module_name = "rules_apple",
    integrity = "sha256-74pXRLL//0n0dkcib2nw8GUiyi6Kb6Gq9dZdUxSBPDQ=",
    url = "https://github.com/bazelbuild/rules_apple/releases/download/{0}/rules_apple.{0}.tar.gz".format(RULES_APPLE_VERSION),
)

# https://github.com/bazelbuild/rules_cc
RULES_CC_VERSION = "0.2.9"

bazel_dep(name = "rules_cc")  # Apache-2.0
archive_override(
    module_name = "rules_cc",
    integrity = "sha256-ac60VLmyngq6fagcculuyv2B0gRL6IO0Y5ixx3yn//k=",
    patch_cmds = [
        # Work around warning about overriding the /std-flag.
        # `cl : Command line warning D9025 : overriding '/std:c++17' with '/std:c++latest'`
        """sed -i'' -e "s|/std:c++17|/std:c++latest|" cc/private/toolchain/windows_cc_toolchain_config.bzl""",
    ],
    strip_prefix = "rules_cc-%s" % RULES_CC_VERSION,
    url = "https://github.com/bazelbuild/rules_cc/releases/download/{0}/rules_cc-{0}.tar.gz".format(RULES_CC_VERSION),
)

cc_configure = use_extension("@rules_cc//cc:extensions.bzl", "cc_configure_extension")
use_repo(cc_configure, "local_config_cc")

# https://github.com/bazelbuild/rules_java
archive_override(
    module_name = "rules_java",
    integrity = "sha256-GzBpjYnczZ3AGxpK1+nlxuZpzfGRjbsFAzTjZbQKG14=",
    url = "https://github.com/bazelbuild/rules_java/releases/download/{0}/rules_java-{0}.tar.gz".format("8.16.1"),
)

# https://github.com/bazelbuild/rules_license
archive_override(
    module_name = "rules_license",
    integrity = "sha256-JtQCH2iY4juC75UweDid1JrCtWGKxWSt5O+HzO0Uezg=",
    urls = ["https://github.com/bazelbuild/rules_license/releases/download/1.0.0/rules_license-1.0.0.tar.gz"],
)

# https://github.com/bazelbuild/rules_python
RULES_PYTHON_VERSION = "1.6.3"

bazel_dep(name = "rules_python")  # Apache-2.0
archive_override(
    module_name = "rules_python",
    integrity = "sha256-L1woT7tOhgRcJjLTVz/ABvrLyl0foCl26J3AzVSItZA=",
    strip_prefix = "rules_python-%s" % RULES_PYTHON_VERSION,
    url = "https://github.com/bazelbuild/rules_python/releases/download/{0}/rules_python-{0}.tar.gz".format(RULES_PYTHON_VERSION),
)

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    is_default = True,
    python_version = "3.12.3",
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pypi",
    python_version = "3.12.3",
    requirements_lock = "//third_party:requirements.txt",
)
use_repo(pip, "pypi")

# https://github.com/bazelbuild/rules_swift
RULES_SWIFT_VERSION = "3.1.2"

archive_override(
    module_name = "rules_swift",
    integrity = "sha256-Xv9xfBi7UTKFtJmt1o8jMVCc1OQR/whelqhrM0LB5ao=",
    url = "https://github.com/bazelbuild/rules_swift/releases/download/{0}/rules_swift.{0}.tar.gz".format(RULES_SWIFT_VERSION),
)

# https://github.com/bazel-contrib/rules_fuzzing
RULES_FUZZING_VERSION = "0.6.0"

bazel_dep(name = "rules_fuzzing")  # Apache-2.0
archive_override(
    module_name = "rules_fuzzing",
    integrity = "sha256-hQiXmJ68BlZ+oGyVnrSmEp+lCe0tu9DRR9YtK5hnFKk=",
    strip_prefix = "rules_fuzzing-%s" % RULES_FUZZING_VERSION,
    url = "https://github.com/bazel-contrib/rules_fuzzing/archive/refs/tags/v{0}.tar.gz".format(RULES_FUZZING_VERSION),
)

# https://github.com/bazelbuild/rules_pkg
archive_override(
    module_name = "rules_pkg",
    integrity = "sha256-tyFcY28iwYSfHDFCxy9LlUuxK7jc88viKa5uacxkeds=",
    url = "https://github.com/bazelbuild/rules_pkg/releases/download/{0}/rules_pkg-{0}.tar.gz".format("1.1.0"),
)

# https://github.com/bazelbuild/rules_proto
archive_override(
    module_name = "rules_proto",
    integrity = "sha256-FKIlhwq06RhpZSz9ae8gKCd/wdxJENZdNTti1uCuIfQ=",
    strip_prefix = "rules_proto-7.1.0",
    urls = ["https://github.com/bazelbuild/rules_proto/releases/download/7.1.0/rules_proto-7.1.0.tar.gz"],
)

# https://github.com/bazelbuild/rules_shell
RULES_SHELL_VERSION = "0.6.1"

bazel_dep(name = "rules_shell")  # Apache-2.0
archive_override(
    module_name = "rules_shell",
    integrity = "sha256-5rh8ib0LJwOeOvLF2gEUdFLyQPddUF9baICHTzEDYwc=",
    strip_prefix = "rules_shell-%s" % RULES_SHELL_VERSION,
    url = "https://github.com/bazelbuild/rules_shell/releases/download/v{0}/rules_shell-v{0}.tar.gz".format(RULES_SHELL_VERSION),
)

# https://github.com/bazelbuild/bazel-skylib
archive_override(
    module_name = "bazel_skylib",
    integrity = "sha256-bnjw5X3iaAH29WT6fEpI3Is2hz5BYlepK7sJN+6shEY=",
    url = "https://github.com/bazelbuild/bazel-skylib/releases/download/{0}/bazel-skylib-{0}.tar.gz".format("1.8.2"),
)

# https://github.com/bazelbuild/rules_android
RULES_ANDROID_VERSION = "0.6.5"

archive_override(
    module_name = "rules_android",
    integrity = "sha256-WlGCx0go2lMWUiGYc5UmTUpc7owQwXF4oNXhI7vRYjw=",
    strip_prefix = "rules_android-%s" % RULES_ANDROID_VERSION,
    url = "https://github.com/bazelbuild/rules_android/releases/download/v{0}/rules_android-v{0}.tar.gz".format(RULES_ANDROID_VERSION),
)

# https://github.com/bazelbuild/rules_kotlin
archive_override(
    module_name = "rules_kotlin",
    integrity = "sha256-5spTdAcDpwmgF79EQfJgAHpgdXQa9l2ht5vDGtqaVwo=",
    url = "https://github.com/bazelbuild/rules_kotlin/releases/download/v{0}/rules_kotlin-v{0}.tar.gz".format("2.1.8"),
)

# https://github.com/bazelbuild/stardoc
archive_override(
    module_name = "stardoc",
    integrity = "sha256-ypM/OfKm4K05L6kf1mJUWvy9NsBcYjZVODhdNaAyMJY=",
    url = "https://github.com/bazelbuild/stardoc/releases/download/{0}/stardoc-{0}.tar.gz".format("0.8.0"),
)

# https://github.com/bazelbuild/bazel-worker-api
BAZEL_WORKER_API_VERSION = "0.0.6"

archive_override(
    module_name = "bazel_worker_api",
    integrity = "sha256-Wqxq5qIwFcx5hEkqEU3FOe/8JE7FrH+PaxU5wV+zdus=",
    strip_prefix = "bazel-worker-api-%s/proto" % BAZEL_WORKER_API_VERSION,
    url = "https://github.com/bazelbuild/bazel-worker-api/releases/download/v{0}/bazel-worker-api-v{0}.tar.gz".format(BAZEL_WORKER_API_VERSION),
)

archive_override(
    module_name = "bazel_worker_java",
    integrity = "sha256-Wqxq5qIwFcx5hEkqEU3FOe/8JE7FrH+PaxU5wV+zdus=",
    strip_prefix = "bazel-worker-api-%s/java" % BAZEL_WORKER_API_VERSION,
    url = "https://github.com/bazelbuild/bazel-worker-api/releases/download/v{0}/bazel-worker-api-v{0}.tar.gz".format(BAZEL_WORKER_API_VERSION),
)

# Bazel contrib
# =========================================================

# https://github.com/bazel-contrib/bazel_features
BAZEL_FEATURES_VERSION = "1.36.0"

archive_override(
    module_name = "bazel_features",
    integrity = "sha256-k5CzkaaNOySu95ZrzoVW0oAD/j8CKlAI78eAforKrxo=",
    strip_prefix = "bazel_features-%s" % BAZEL_FEATURES_VERSION,
    url = "https://github.com/bazel-contrib/bazel_features/releases/download/v{0}/bazel_features-v{0}.tar.gz".format(BAZEL_FEATURES_VERSION),
)

# https://github.com/bazel-contrib/bazel-gazelle
archive_override(
    module_name = "gazelle",
    integrity = "sha256-5Ge4AQRrZZjGVzCbRdJCbcA1E3d70Qkq8sYu6/mQrKU=",
    url = "https://github.com/bazelbuild/bazel-gazelle/releases/download/v{0}/bazel-gazelle-v{0}.tar.gz".format("0.45.0"),
)

# https://github.com/bazel-contrib/supply-chain
PACKAGE_METADATA_VERSION = "0.0.5"

archive_override(
    module_name = "package_metadata",
    integrity = "sha256-Se0R5da3UsVfpTnLsQsnNpdPNHsIHXvVAKgNrLfb7AY=",
    strip_prefix = "supply-chain-%s/metadata" % PACKAGE_METADATA_VERSION,
    url = "https://github.com/bazel-contrib/supply-chain/releases/download/v{0}/supply-chain-v{0}.tar.gz".format(PACKAGE_METADATA_VERSION),
)

# https://github.com/bazel-contrib/rules_go
archive_override(
    module_name = "rules_go",
    integrity = "sha256-pynI7SRHyQ/hQAd2iQecoKz7dYDsQWN/MS1lDOnZPZY=",
    url = "https://github.com/bazelbuild/rules_go/releases/download/v{0}/rules_go-v{0}.zip".format("0.57.0"),
)

# https://github.com/bazel-contrib/rules_jvm_external
RULES_JVM_EXTERNAL_VERSION = "6.8"

archive_override(
    module_name = "rules_jvm_external",
    integrity = "sha256-cEoBl+TpZvlpkyYEGPJUJWgZhJBFbCGBT2R65wkfVvI=",
    strip_prefix = "rules_jvm_external-%s" % RULES_JVM_EXTERNAL_VERSION,
    url = "https://github.com/bazel-contrib/rules_jvm_external/releases/download/{0}/rules_jvm_external-{0}.tar.gz".format(RULES_JVM_EXTERNAL_VERSION),
)

# https://github.com/bazel-contrib/toolchains_llvm
TOOLCHAINS_LLVM_VERSION = "1.5.0"

bazel_dep(name = "toolchains_llvm", dev_dependency = True)  # Apache-2.0
archive_override(
    module_name = "toolchains_llvm",
    integrity = "sha256-SeacARvKpMmnJGooerH7T37T/efL1zADdMEDD0DSu5U=",
    strip_prefix = "toolchains_llvm-v%s" % TOOLCHAINS_LLVM_VERSION,
    url = "https://github.com/bazel-contrib/toolchains_llvm/releases/download/v{0}/toolchains_llvm-v{0}.tar.gz".format(TOOLCHAINS_LLVM_VERSION),
)

llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
llvm.toolchain(llvm_version = "20.1.8")
use_repo(llvm, "llvm_toolchain")

# Other Bazel-required dependencies
# =========================================================

# https://github.com/robolectric/robolectric-bazel
RULES_ROBOLECTRIC_VERSION = "4.15.1"

archive_override(
    module_name = "rules_robolectric",
    integrity = "sha256-cOyAPJORXVtQn4bGPVDzgbQatw63DiYIbvw9g7behSk=",
    strip_prefix = "robolectric-bazel-%s" % RULES_ROBOLECTRIC_VERSION,
    url = "https://github.com/robolectric/robolectric-bazel/releases/download/{0}/robolectric-bazel-{0}.tar.gz".format(RULES_ROBOLECTRIC_VERSION),
)

# https://github.com/fmeum/buildozer
BUILDOZER_VERSION = "8.2.1"

archive_override(
    module_name = "buildozer",
    integrity = "sha256-qguc6LLFdWL7OXk1Bm2fatLqzOEggu1Av5wAVNiJnec=",
    strip_prefix = "buildozer-%s" % BUILDOZER_VERSION,
    url = "https://github.com/fmeum/buildozer/releases/download/v{0}/buildozer-v{0}.tar.gz".format(BUILDOZER_VERSION),
)

# https://github.com/google/googletest
GOOGLETEST_VERSION = "1.17.0"

archive_override(
    module_name = "googletest",
    integrity = "sha256-Zfq3AdmCnTjLd8FKzcQx0hCL/b+JeeQOuK5Wft8Qsnw=",
    strip_prefix = "googletest-%s" % GOOGLETEST_VERSION,
    url = "https://github.com/google/googletest/releases/download/v{0}/googletest-{0}.tar.gz".format(GOOGLETEST_VERSION),
)

# https://github.com/protocolbuffers/protobuf
PROTOBUF_VERSION = "32.1"

archive_override(
    module_name = "protobuf",
    integrity = "sha256-P+6r0HehErVq9SUZvE7OkOKLRYP0/CVJyV12WYXg/Tw=",
    strip_prefix = "protobuf-%s" % PROTOBUF_VERSION,
    url = "https://github.com/protocolbuffers/protobuf/releases/download/v{0}/protobuf-{0}.tar.gz".format(PROTOBUF_VERSION),
)

# https://github.com/abseil/abseil-cpp
ABSEIL_CPP_VERSION = "20250814.1"

archive_override(
    module_name = "abseil-cpp",
    integrity = "sha256-FpL3fRc5us8/lDNxiLeFg88JurfkINLcbFYFpPhnhaE=",
    strip_prefix = "abseil-cpp-%s" % ABSEIL_CPP_VERSION,
    url = "https://github.com/abseil/abseil-cpp/releases/download/{0}/abseil-cpp-{0}.tar.gz".format(ABSEIL_CPP_VERSION),
)

# https://github.com/abseil/abseil-py
ABSEIL_PY_VERSION = "2.3.1"

archive_override(
    module_name = "abseil-py",
    integrity = "sha256-zG2HZMC912zBMI79t1A10CFEeXQnGoPv+n8mFlRO49o=",
    patch_cmds = [
        """cat <<EOF >MODULE.bazel
module(name = "abseil-py")
EOF""",
    ],
    strip_prefix = "abseil-py-%s" % ABSEIL_PY_VERSION,
    url = "https://github.com/abseil/abseil-py/archive/v%s.tar.gz" % ABSEIL_PY_VERSION,
)

# https://github.com/open-source-parsers/jsoncpp
# 1.9.6 + Bazel module support.
JSONCPP_VERSION = "037752d9a1e48c8b7e5a62ee895a352166df03e3"

archive_override(
    module_name = "jsoncpp",
    integrity = "sha256-xkiG0GJ54QhZBO3LXqnfMc5QgVwX85uD/9GqGc78RTw=",
    strip_prefix = "jsoncpp-%s" % JSONCPP_VERSION,
    url = "https://github.com/open-source-parsers/jsoncpp/archive/%s.tar.gz" % JSONCPP_VERSION,
)

# https://github.com/nlohmann/json
NLOHMANN_JSON_VERSION = "3.12.0"

archive_override(
    module_name = "nlohmann_json",
    integrity = "sha256-S5LrDAbRBoP3RHzpQGy5fNS0U74Y1yeTIPey8CXBAYc=",
    strip_prefix = "json-%s" % NLOHMANN_JSON_VERSION,
    url = "https://github.com/nlohmann/json/archive/refs/tags/v%s.tar.gz" % NLOHMANN_JSON_VERSION,
)

# https://github.com/google/re2
RE2_VERSION = "2025-08-12"

archive_override(
    module_name = "re2",
    integrity = "sha256-LzvsY0w+Ueofrw1EHgqHGLc+91jXAgF17X41LfP2rhI=",
    strip_prefix = "re2-%s" % RE2_VERSION,
    url = "https://github.com/google/re2/releases/download/{0}/re2-{0}.tar.gz".format(RE2_VERSION),
)

# https://github.com/pybind/pybind11_bazel
archive_override(
    module_name = "pybind11_bazel",
    integrity = "sha256-yuaAZwv6boJwPAPyo8mVQIzcv0NhbXvdGY70XTwydzE=",
    strip_prefix = "pybind11_bazel-2.13.6",
    urls = ["https://github.com/pybind/pybind11_bazel/releases/download/v2.13.6/pybind11_bazel-2.13.6.tar.gz"],
)

# https://github.com/apple/swift-argument-parser
SWIFT_ARGUMENT_PARSER_VERSION = "1.6.1"

archive_override(
    module_name = "swift_argument_parser",
    integrity = "sha256-0vuxWIYRW7LZv7Y9TB3dQIDLtL/vJlEzXF07ndXzyLo=",
    # Missing build file, but that's fine as it's unused and only required to
    # satisfy some dark corner of Bazel.
    patch_cmds = [
        """cat <<EOF >MODULE.bazel
module(name = "swift_argument_parser")
EOF""",
    ],
    strip_prefix = "swift-argument-parser-%s" % SWIFT_ARGUMENT_PARSER_VERSION,
    url = "https://github.com/apple/swift-argument-parser/archive/refs/tags/%s.tar.gz" % SWIFT_ARGUMENT_PARSER_VERSION,
)

# Third-party Bazel
# =========================================================

# https://github.com/uber/hermetic_cc_toolchain
bazel_dep(name = "hermetic_cc_toolchain", dev_dependency = True)  # MIT
archive_override(
    module_name = "hermetic_cc_toolchain",
    integrity = "sha256-NkZViF5a9azQKymeTq8ROhMX3WViUySbN7fJ8FvyO3k=",
    patch_args = ["-p1"],
    patches = ["//third_party/hermetic_cc_toolchain:zig-14.patch"],
    url = "https://github.com/uber/hermetic_cc_toolchain/releases/download/v{0}/hermetic_cc_toolchain-v{0}.tar.gz".format("4.0.1"),
)

zig_toolchains = use_extension("@hermetic_cc_toolchain//toolchain:ext.bzl", "toolchains")
use_repo(zig_toolchains, "zig_sdk")

# Misc tools
# =========================================================

# HEAD as of 2024-10-28.
# https://github.com/hedronvision/bazel-compile-commands-extractor
bazel_dep(name = "hedron_compile_commands", dev_dependency = True)
archive_override(
    module_name = "hedron_compile_commands",
    integrity = "sha256-ZYEiz7HyW+duohKwD16wR9jirci8+SO5GEYfKx43zfI=",
    patch_cmds = [
        # .h can also appear as a c_source_extension with the new syntax-checking Bazel does.
        # See: https://github.com/hedronvision/bazel-compile-commands-extractor/pull/219
        """sed -i'' -e "s/('.c', '.i')/('.c', '.i', '.h')/" refresh.template.py""",
    ],
    strip_prefix = "bazel-compile-commands-extractor-4f28899228fb3ad0126897876f147ca15026151e",
    url = "https://github.com/hedronvision/bazel-compile-commands-extractor/archive/4f28899228fb3ad0126897876f147ca15026151e.tar.gz",
)

# HEAD as of 2025-01-26.
# https://github.com/erenon/bazel_clang_tidy
bazel_dep(name = "bazel_clang_tidy", dev_dependency = True)  # MIT
archive_override(
    module_name = "bazel_clang_tidy",
    integrity = "sha256-cjoiSKMv0j33LPlj9Kf0BEBYy9wJoa1+jvZ/0WwHM0Y=",
    strip_prefix = "bazel_clang_tidy-db677011c7363509a288a9fb3bf0a50830bbf791",
    url = "https://github.com/erenon/bazel_clang_tidy/archive/db677011c7363509a288a9fb3bf0a50830bbf791.tar.gz",
)

# Third-party
# =========================================================

# https://github.com/chriskohlhoff/asio
ASIO_VERSION = "1-36-0"

bazel_dep(name = "asio")  # BSL-1.0
archive_override(
    module_name = "asio",
    build_file = "//third_party:asio.BUILD",
    integrity = "sha256-AxCnayfhhU8J9pazDeV9xJC14bF/rtHrjJookflW5Ss=",
    patch_cmds = [
        """cat <<EOF >MODULE.bazel
module(name = "asio")
bazel_dep(name = "boringssl")
bazel_dep(name = "rules_cc")
EOF""",
    ],
    strip_prefix = "asio-asio-%s" % ASIO_VERSION,
    url = "https://github.com/chriskohlhoff/asio/archive/asio-%s.tar.gz" % ASIO_VERSION,
)

# https://github.com/google/boringssl
BORINGSSL_VERSION = "0.20251002.0"

bazel_dep(name = "boringssl")  # OpenSSL + ISC
archive_override(
    module_name = "boringssl",
    integrity = "sha256-+Wcz/D3wPUGV22VtG3uMF0wz+V0FL4EfDsyPTk49szI=",
    strip_prefix = "boringssl-%s" % BORINGSSL_VERSION,
    url = "https://github.com/google/boringssl/releases/download/{0}/boringssl-{0}.tar.gz".format(BORINGSSL_VERSION),
)

# https://github.com/google/brotli
bazel_dep(name = "brotli")
archive_override(
    module_name = "brotli",  # MIT
    integrity = "sha256-5yCmyilCi4A/StFlNxdx9TmPq6OX7fZ3iDehhZnqE/8=",
    patch_cmds = [
        """sed -i'' -e 's/package(/package(features=["-layering_check"],/' BUILD.bazel""",
        """cat <<EOF >MODULE.bazel
module(name = "brotli")
EOF""",
    ],
    strip_prefix = "brotli-1.1.0",
    url = "https://github.com/google/brotli/archive/refs/tags/v1.1.0.tar.gz",
)

# https://github.com/tartanllama/expected
EXPECTED_VERSION = "1.3.1"

bazel_dep(name = "expected")
archive_override(
    module_name = "expected",  # CC0-1.0
    build_file = "//third_party:expected.BUILD",
    integrity = "sha256-mgT09HL7tcML9gQC8cpibEp2mH+GeXjQuKNderP7j+c=",
    patch_cmds = [
        """cat <<EOF >MODULE.bazel
module(name = "expected")
bazel_dep(name = "rules_cc")
EOF""",
    ],
    strip_prefix = "expected-%s" % EXPECTED_VERSION,
    url = "https://github.com/tartanllama/expected/archive/v%s.tar.gz" % EXPECTED_VERSION,
)

# HEAD, last updated 2025-04-24.
# https://github.com/googlefonts/opensans
http_file(
    name = "opensans",  # OFL-1.1
    integrity = "sha256-xTrO6i3PW0CYCZwMTQoGHRfheKBJMXtCpCKxqff461k=",
    url = "https://github.com/googlefonts/opensans/raw/bd7e37632246368c60fdcbd374dbf9bad11969b6/fonts/ttf/OpenSans-Regular.ttf",
)

# https://github.com/fmtlib/fmt
FMT_VERSION = "12.0.0"

archive_override(
    module_name = "fmt",
    build_file = "//third_party:fmt.BUILD",
    integrity = "sha256-HDIpMgNEl5K/jpTH9mmcZDiH6Cby1mqAhptPJ5+wfSU=",
    patch_cmds = [
        """cat <<EOF >MODULE.bazel
module(name = "fmt")
bazel_dep(name = "rules_cc")
EOF""",
    ],
    strip_prefix = "fmt-%s" % FMT_VERSION,
    url = "https://github.com/fmtlib/fmt/releases/download/{0}/fmt-{0}.zip".format(FMT_VERSION),
)

# https://github.com/freetype/freetype
FREETYPE_VERSION = "VER-2-14-1"

bazel_dep(name = "freetype2")  # FTL
archive_override(
    module_name = "freetype2",
    build_file = "//third_party:freetype2.BUILD",
    integrity = "sha256-RL1p0fB1BgNBDP1PJvHFUjxaOgh6LfqGObdX3Hxmd74=",
    patch_cmds = [
        """cat <<EOF >MODULE.bazel
module(name = "freetype2")
bazel_dep(name = "libpng")
bazel_dep(name = "platforms")
bazel_dep(name = "rules_cc")
bazel_dep(name = "zlib")
EOF""",
    ],
    strip_prefix = "freetype-%s" % FREETYPE_VERSION,
    url = "https://github.com/freetype/freetype/archive/%s.tar.gz" % FREETYPE_VERSION,
)

# https://github.com/ArthurSonzogni/FTXUI
FTXUI_VERSION = "6.1.9"

bazel_dep(name = "ftxui")  # MIT
archive_override(
    module_name = "ftxui",
    integrity = "sha256-hoZw5FHDi9w60j0IZ5ZUPN5KhF/QQgFIsZjf9cvggoU=",
    url = "https://github.com/ArthurSonzogni/FTXUI/releases/download/v%s/source.tar.gz" % FTXUI_VERSION,
)

# https://github.com/Dav1dde/glad/
bazel_dep(name = "glad2")
local_path_override(
    # This can't called glad as that will cause rules_python to generate folder
    # structures that conflict with imports with glad in the path.
    module_name = "glad2",  # MIT
    path = "third_party/glad2",
)

# HEAD, last updated at 2025-10-05.
# https://github.com/html5lib/html5lib-tests/
HTML5LIB_TESTS_VERSION = "f994590f528ac8b6073665791ddb1ed85c66dfb2"

bazel_dep(name = "html5lib-tests")
archive_override(
    module_name = "html5lib-tests",  # MIT
    build_file = "//third_party:html5lib-tests.BUILD",
    integrity = "sha256-Mm3mJftYKVzHglTgw+oyyN2jtSfp/nhcxZ3g1EJXYW4=",
    patch_cmds = [
        """cat <<EOF >MODULE.bazel
module(name = "html5lib-tests")
EOF""",
    ],
    strip_prefix = "html5lib-tests-%s" % HTML5LIB_TESTS_VERSION,
    url = "https://github.com/html5lib/html5lib-tests/archive/%s.tar.gz" % HTML5LIB_TESTS_VERSION,
)

# https://github.com/unicode-org/icu
ICU_VERSION = "77-1"

bazel_dep(name = "icu")  # Unicode-DFS-2016
archive_override(
    module_name = "icu",
    build_file = "//third_party:icu.BUILD",
    integrity = "sha256-3tOpb2tyNtFg3zCvRlkxZbnHik7HKkFKpjz1BhTkwU4=",
    patch_cmds = [
        "rm source/common/BUILD.bazel",
        "rm source/stubdata/BUILD.bazel",
        "rm source/tools/toolutil/BUILD.bazel",
        "rm source/i18n/BUILD.bazel",

        # icu 76.1's https://github.com/unicode-org/icu/commit/66ba09973a4231711b6de0de042f4e532b1873e5
        # causes pkgdata to segfault due to faulty-looking platform detection.
        # WINDOWS_WITH_MSVC is defined by icu, meaning that
        # pkg_createOptMatchArch never sets the arch to anything, and the
        # nullptr arch is later used like strcmp(nullptr, "x64") in
        # getArchitecture, so let's hack out their fixes.
        "sed -i'' -e 's/if defined(__clang__)/if 0/' source/tools/toolutil/pkg_genc.cpp",
        """cat <<EOF >MODULE.bazel
module(name = "icu")
bazel_dep(name = "rules_cc")
bazel_dep(name = "platforms")
EOF""",
    ],
    strip_prefix = "icu-release-%s/icu4c" % ICU_VERSION,
    url = "https://github.com/unicode-org/icu/archive/refs/tags/release-%s.tar.gz" % ICU_VERSION,
)

# https://www.unicode.org/Public/idna/
http_file(
    name = "idna_mapping_table",
    integrity = "sha256-h/BVBdwCb9sr/xYTK9xoqAFGdYNogqmisYRFQK0744I=",
    url = "https://www.unicode.org/Public/17.0.0/idna/IdnaMappingTable.txt",
)

# https://github.com/ocornut/imgui
IMGUI_VERSION = "1.92.3"

bazel_dep(name = "imgui")  # MIT
archive_override(
    module_name = "imgui",
    build_file = "//third_party:imgui.BUILD",
    integrity = "sha256-khLufEcYsUZqXZnmS84+8ZZXBK/qS6ZR+Nl40HkbfHw=",
    patch_cmds = [
        """cat <<EOF >MODULE.bazel
module(name = "imgui")
bazel_dep(name = "rules_cc")
EOF""",
    ],
    strip_prefix = "imgui-%s" % IMGUI_VERSION,
    url = "https://github.com/ocornut/imgui/archive/v%s.tar.gz" % IMGUI_VERSION,
)

# https://github.com/SFML/imgui-sfml
# 3.0 + support for imgui 1.92.x.
IMGUI_SFML_VERSION = "f768c96c3a8ff8ca9817ea1d1ce597162e7e714c"

bazel_dep(name = "imgui-sfml")  # MIT
archive_override(
    module_name = "imgui-sfml",
    build_file = "//third_party:imgui-sfml.BUILD",
    integrity = "sha256-pWbdZqZmO3S9sJDfWatrwqBXie7QGZbm5cXP9dBFV8Y=",
    patch_cmds = [
        # Use glad for OpenGL instead of the system OpenGL headers.
        "sed -i'' -e /OpenGL.hpp/d imgui-SFML.cpp",
        "sed -i'' -e '4i\\\n#include <glad/gl.h>\\\n' imgui-SFML.cpp",
        "sed -i'' -e '297i\\\n\\\tif (gladLoaderLoadGL() == 0) std::abort();\\\n' imgui-SFML.cpp",
        # Hack in compatibility with imgui 1.92.x. They forgot to fix this when officially adding support for it.
        "sed -i'' -e '/You forgot to create and set font texture/d' imgui-SFML.cpp",
        """cat <<EOF >MODULE.bazel
module(name = "imgui-sfml")
bazel_dep(name = "glad2")
bazel_dep(name = "imgui")
bazel_dep(name = "rules_cc")
bazel_dep(name = "sfml")
EOF""",
    ],
    strip_prefix = "imgui-sfml-%s" % IMGUI_SFML_VERSION,
    url = "https://github.com/SFML/imgui-sfml/archive/%s.tar.gz" % IMGUI_SFML_VERSION,
)

# https://github.com/martinus/nanobench
bazel_dep(name = "nanobench")  # MIT
archive_override(
    module_name = "nanobench",
    build_file = "//third_party:nanobench.BUILD",
    integrity = "sha256-U6WpE/ppXCNUZmG/LNIrKZ4Qo+mU2e2X2vibXK2g2nA=",
    patch_cmds = [
        """cat <<EOF >MODULE.bazel
module(name = "nanobench")
bazel_dep(name = "rules_cc")
EOF""",
        # nanobench's use of std::locale segfaults w/ -fno-rtti in combination w/ libstdc++.
        # See: https://github.com/martinus/nanobench/issues/122
        "sed -i'' -e /std::locale\\(/d src/include/nanobench.h",
    ],
    strip_prefix = "nanobench-4.3.11",
    url = "https://github.com/martinus/nanobench/archive/refs/tags/v4.3.11.tar.gz",
)

# https://github.com/libjpeg-turbo/libjpeg-turbo
LIBJPEG_TURBO_VERSION = "3.1.2"

bazel_dep(name = "libjpeg-turbo")  # BSD-3-Clause AND IJG
archive_override(
    module_name = "libjpeg-turbo",
    build_file = "//third_party:libjpeg-turbo.BUILD",
    integrity = "sha256-jwASI0tGTOUIkMSQ8YGU+ROnsfTmoD1mRBefoPhn0M8=",
    patch_cmds = [
        """cat <<EOF >MODULE.bazel
module(name = "libjpeg-turbo")
bazel_dep(name = "bazel_skylib")
bazel_dep(name = "platforms")
bazel_dep(name = "rules_cc")
EOF""",
    ],
    strip_prefix = "libjpeg-turbo-%s" % LIBJPEG_TURBO_VERSION,
    url = "https://github.com/libjpeg-turbo/libjpeg-turbo/releases/download/{0}/libjpeg-turbo-{0}.tar.gz".format(LIBJPEG_TURBO_VERSION),
)

# https://github.com/glennrp/libpng
LIBPNG_VERSION = "1.6.50"

bazel_dep(name = "libpng")  # Libpng
archive_override(
    module_name = "libpng",
    build_file = "//third_party:libpng.BUILD",
    integrity = "sha256-cRWOU8/fKHe8mbyrM2QdeN8/SObg2q0DCv6cuMAxqkY=",
    patch_cmds = [
        """cat <<EOF >MODULE.bazel
module(name = "libpng")
bazel_dep(name = "platforms")
bazel_dep(name = "rules_cc")
bazel_dep(name = "zlib")
EOF""",
    ],
    strip_prefix = "libpng-%s" % LIBPNG_VERSION,
    url = "https://github.com/glennrp/libpng/archive/v%s.tar.gz" % LIBPNG_VERSION,
)

# https://github.com/SFML/SFML
SFML_VERSION = "3.0.2"

bazel_dep(name = "sfml")  # Zlib
archive_override(
    module_name = "sfml",
    build_file = "//third_party:sfml.BUILD",
    integrity = "sha256-ADTgX5VQnl0/uBsWJXE+Btp7Bo8hAojOP9ZxBvj0aZU=",
    patch_cmds = [
        # SFML uses a non-standard include path to vulkan.h
        # libvulkan-dev: /usr/include/vulkan/vulkan.h
        "sed -i'' -e 's|vulkan.h|vulkan/vulkan.h|' src/SFML/Window/Win32/VulkanImplWin32.cpp",
        "sed -i'' -e 's|vulkan.h|vulkan/vulkan.h|' src/SFML/Window/Unix/VulkanImplX11.cpp",
        """cat <<EOF >MODULE.bazel
module(name = "sfml")
bazel_dep(name = "freetype2")
bazel_dep(name = "platforms")
bazel_dep(name = "rules_cc")
bazel_dep(name = "stb")
bazel_dep(name = "udev-zero")
bazel_dep(name = "vulkan")
bazel_dep(name = "xcursor")
bazel_dep(name = "xrandr")
EOF""",
    ],
    strip_prefix = "SFML-%s" % SFML_VERSION,
    url = "https://github.com/SFML/SFML/archive/%s.tar.gz" % SFML_VERSION,
)

# https://github.com/gabime/spdlog
SPDLOG_VERSION = "1.15.3"

bazel_dep(name = "spdlog")  # MIT
archive_override(
    module_name = "spdlog",
    build_file = "//third_party:spdlog.BUILD",
    integrity = "sha256-FaBOacIi62wBCUtcf/iiSbNrsieI1yUZZG+4X+smfmc=",
    patch_cmds = [
        """cat <<EOF >MODULE.bazel
module(name = "spdlog")
bazel_dep(name = "fmt")
bazel_dep(name = "platforms")
bazel_dep(name = "rules_cc")
EOF""",
    ],
    strip_prefix = "spdlog-%s" % SPDLOG_VERSION,
    url = "https://github.com/gabime/spdlog/archive/v%s.tar.gz" % SPDLOG_VERSION,
)

# HEAD, last updated at 2025-06-07.
# https://github.com/nothings/stb
STB_VERSION = "fede005abaf93d9d7f3a679d1999b2db341b360f"

archive_override(
    module_name = "stb",
    build_file = "//third_party:stb.BUILD",
    integrity = "sha256-PEXpqxI5MydK14Lhn8QClES/4m4KXupIPDCoK4gLikI=",
    patch_cmds = [
        """cat <<EOF >MODULE.bazel
module(name = "stb")
bazel_dep(name = "rules_cc")
EOF""",
    ],
    strip_prefix = "stb-%s" % STB_VERSION,
    url = "https://github.com/nothings/stb/archive/%s.tar.gz" % STB_VERSION,
)

# https://www.unicode.org/Public/
bazel_dep(name = "ucd")
archive_override(
    module_name = "ucd",
    build_file_content = """exports_files(["UnicodeData.txt"])""",
    integrity = "sha256-yG3YHysUpDsMwGSqX4mqckE4aAHjXFnHmE5XmDJjTrI=",
    patch_cmds = [
        """cat <<EOF >MODULE.bazel
module(name = "ucd")
EOF""",
    ],
    url = "https://www.unicode.org/Public/16.0.0/ucd/UCD.zip",
)

# https://github.com/illiliti/libudev-zero
archive_override(
    module_name = "udev-zero",
    build_file = "//third_party:udev-zero.BUILD",
    patch_cmds = [
        """cat <<EOF >MODULE.bazel
module(name = "udev-zero")
bazel_dep(name = "platforms")
bazel_dep(name = "rules_cc")
EOF""",
    ],
    sha256 = "0bd89b657d62d019598e6c7ed726ff8fed80e8ba092a83b484d66afb80b77da5",
    strip_prefix = "libudev-zero-1.0.3",
    url = "https://github.com/illiliti/libudev-zero/archive/1.0.3.tar.gz",
)

# https://github.com/KhronosGroup/Vulkan-Headers
# https://github.com/KhronosGroup/Vulkan-Hpp
VULKAN_TAG = "1.4.328"

archive_override(
    module_name = "vulkan",
    build_file = "//third_party:vulkan.BUILD",
    integrity = "sha256-OtVtOHF5tH3WMkMsz5ibu2l3Ph1zJpK3u62cTTaqEwQ=",
    patch_cmds = [
        """cat <<EOF >MODULE.bazel
module(name = "vulkan")
bazel_dep(name = "rules_cc")
bazel_dep(name = "platforms")
EOF""",
    ],
    strip_prefix = "Vulkan-Headers-%s" % VULKAN_TAG,
    url = "https://github.com/KhronosGroup/Vulkan-Headers/archive/v%s.tar.gz" % VULKAN_TAG,
)

bazel_dep(name = "vulkan_hpp")  # Apache-2.0
archive_override(
    module_name = "vulkan_hpp",
    build_file = "//third_party:vulkan_hpp.BUILD",
    integrity = "sha256-oKN7LRkp6u+Qcyds2yPtf3CClNSSPPfw03pp5F9isyI=",
    patch_cmds = [
        """cat <<EOF >MODULE.bazel
module(name = "vulkan_hpp")
bazel_dep(name = "rules_cc")
bazel_dep(name = "vulkan")
EOF""",
    ],
    strip_prefix = "Vulkan-Hpp-%s" % VULKAN_TAG,
    url = "https://github.com/KhronosGroup/Vulkan-Hpp/archive/v%s.tar.gz" % VULKAN_TAG,
)

# HEAD, last updated at 2025-04-17.
# https://github.com/web-platform-tests/wpt/blob/master/url/resources/urltestdata.json
WPT_REVISION = "048018b5af85f8d47b8a704b48cf6f9c0a461876"

http_file(
    name = "wpt_urltestdata",
    integrity = "sha256-V4MdYOxP+cF7e1eftgpS3yWpXgcgjKGeM9tfbmjXpuc=",
    url = "https://raw.githubusercontent.com/web-platform-tests/wpt/%s/url/resources/urltestdata.json" % WPT_REVISION,
)

# https://gitlab.freedesktop.org/xorg/lib/libxcursor
XCURSOR_VERSION = "1.2.3"

archive_override(
    module_name = "xcursor",
    build_file = "//third_party:xcursor.BUILD",
    integrity = "sha256-hAKS5c366Ni3lboAvL5iCg3gr2rhhH4ULfCd7IanDtw=",
    patch_cmds = [
        """cat <<EOF >MODULE.bazel
module(name = "xcursor")
bazel_dep(name = "rules_cc")
bazel_dep(name = "xrender")
EOF""",
    ],
    strip_prefix = "libxcursor-libXcursor-%s" % XCURSOR_VERSION,
    urls = [
        "https://github.com/robinlinden/libxcursor/archive/libXcursor-%s.tar.gz" % XCURSOR_VERSION,
        "https://gitlab.freedesktop.org/xorg/lib/libxcursor/-/archive/libXcursor-{0}/libxcursor-libXcursor-{0}.tar.gz".format(XCURSOR_VERSION),
    ],
)

# https://gitlab.freedesktop.org/xorg/lib/libxext
XEXT_VERSION = "1.3.6"

archive_override(
    module_name = "xext",
    build_file = "//third_party:xext.BUILD",
    integrity = "sha256-TkjqJxtfU8M4YBim4CY0VP5YKkE/zgJzreYB+/6eDHI=",
    patch_cmds = [
        """cat <<EOF >MODULE.bazel
module(name = "xext")
bazel_dep(name = "rules_cc")
EOF""",
    ],
    strip_prefix = "libxext-libXext-%s" % XEXT_VERSION,
    urls = [
        "https://github.com/robinlinden/libxext/archive/libXext-%s.tar.gz" % XEXT_VERSION,
        "https://gitlab.freedesktop.org/xorg/lib/libxext/-/archive/libXext-{0}/libxext-libXext-{0}.tar.gz".format(XEXT_VERSION),
    ],
)

# https://gitlab.freedesktop.org/xorg/lib/libxrandr
XRANDR_VERSION = "1.5.4"

archive_override(
    module_name = "xrandr",
    build_file = "//third_party:xrandr.BUILD",
    patch_cmds = [
        """cat <<EOF >MODULE.bazel
module(name = "xrandr")
bazel_dep(name = "rules_cc")
bazel_dep(name = "xext")
bazel_dep(name = "xrender")
EOF""",
    ],
    sha256 = "a1909cbe9ded94187b6420ae8c347153f8278955265cb80a64cdae5501433396",
    strip_prefix = "libxrandr-libXrandr-%s" % XRANDR_VERSION,
    urls = [
        "https://github.com/robinlinden/libxrandr/archive/libXrandr-%s.tar.gz" % XRANDR_VERSION,
        "https://gitlab.freedesktop.org/xorg/lib/libxrandr/-/archive/libXrandr-{0}/libxrandr-libXrandr-{0}.tar.gz".format(XRANDR_VERSION),
    ],
)

# https://gitlab.freedesktop.org/xorg/lib/libxrender
XRENDER_VERSION = "0.9.12"

archive_override(
    module_name = "xrender",
    build_file = "//third_party:xrender.BUILD",
    integrity = "sha256-RwVZ354OTbyB1YVdPTZKF+EiY2AKCCFyMvix9u883b8=",
    patch_cmds = [
        """cat <<EOF >MODULE.bazel
module(name = "xrender")
bazel_dep(name = "rules_cc")
EOF""",
    ],
    strip_prefix = "libxrender-libXrender-%s" % XRENDER_VERSION,
    urls = [
        "https://github.com/robinlinden/libxrender/archive/libXrender-%s.tar.gz" % XRENDER_VERSION,
        "https://gitlab.freedesktop.org/xorg/lib/libxrender/-/archive/libXrender-{0}/libxrender-libXrender-{0}.tar.gz".format(XRENDER_VERSION),
    ],
)

# https://github.com/madler/zlib
bazel_dep(name = "zlib")  # Zlib
archive_override(
    module_name = "zlib",
    build_file = "//third_party:zlib.BUILD",
    integrity = "sha256-F+iIY/NgBnKrSRgvIXKBtvxNPHYr3jYZNeQ2qVIU0Fw=",
    patch_cmds = [
        """cat <<EOF >MODULE.bazel
module(name = "zlib")
bazel_dep(name = "platforms")
bazel_dep(name = "rules_cc")
EOF""",
    ],
    strip_prefix = "zlib-1.3.1",
    urls = ["https://github.com/madler/zlib/archive/v1.3.1.tar.gz"],
)

# https://github.com/facebook/zstd
ZSTD_VERSION = "1.5.7"

bazel_dep(name = "zstd")
archive_override(
    module_name = "zstd",  # BSD-3-Clause
    build_file = "//third_party:zstd.BUILD",
    integrity = "sha256-6zPlH0mhXgI5UM14Jcp0pKK0Pbg1SCWsJPwbfuCeb6M=",
    patch_cmds = [
        """cat <<EOF >MODULE.bazel
module(name = "zstd")
bazel_dep(name = "platforms")
bazel_dep(name = "rules_cc")
EOF""",
    ],
    strip_prefix = "zstd-%s" % ZSTD_VERSION,
    url = "https://github.com/facebook/zstd/releases/download/v{0}/zstd-{0}.tar.gz".format(ZSTD_VERSION),
)
