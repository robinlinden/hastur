# Bazel configuration
# =========================================================

build --enable_platform_specific_config
build --test_env=HASTUR_ICU_DATA=external/icu-data/
coverage --combined_report=lcov
test --test_output=errors
test --test_summary=terse
test --test_verbose_timeout_warnings

# Bazel deprecations
# =========================================================
# See: https://docs.bazel.build/versions/main/backward-compatibility.html

build --incompatible_disallow_empty_glob
build --incompatible_enable_cc_toolchain_resolution

# Compiler configuration
# =========================================================

# Bazel + Clang supports this really cool features where it checks that you're
# not relying on transitive dependencies, so let's enable that!
build:linux --features=layering_check

build:linux --cxxopt='-std=c++2b'
build:linux --cxxopt='-fno-rtti'

# Force DWARF-4 format for debug symbols for compatibility with valgrind.
# See: https://bugs.kde.org/show_bug.cgi?id=452758
build:linux --copt='-gdwarf-4'

build:windows --enable_runfiles
build:windows --cxxopt='/std:c++latest'
build:windows --cxxopt='/GR-' # Disable rtti.
build:windows --copt='/permissive-' # Conform to the standard.
build:windows --copt='/Zc:__cplusplus' # Report the real supported C++ version, not just C++98.
#build:windows --copt='-utf-8' # Use UTF-8 as the source and execution character sets.

# Special build options
# =========================================================

# https://bazel.build/configure/windows#clang
build:clang-cl --extra_toolchains=@local_config_cc//:cc-toolchain-x64_windows-clang-cl
build:clang-cl --extra_execution_platforms=//:x64_windows-clang-cl
build:clang-cl --platforms=//:x64_windows-clang-cl

build:libc++ --cxxopt=-stdlib=libc++
build:libc++ --cxxopt=-fexperimental-library
build:libc++ --linkopt=-stdlib=libc++
# https://releases.llvm.org/16.0.0/projects/libcxx/docs/ReleaseNotes.html#upcoming-deprecations-and-removals
build:libc++ --copt=-D_LIBCPP_REMOVE_TRANSITIVE_INCLUDES

# Some of this is from "Can I run AddressSanitizer with more aggressive diagnostics enabled?"
# on https://github.com/google/sanitizers/wiki/AddressSanitizer#faq and some is from
# https://chromium.googlesource.com/external/github.com/grpc/grpc/+/4e9206f48c91e17f43856b016b12f59dd5118293/tools/bazel.rc
build:asan --strip=never
build:asan --features=asan
build:asan --copt=-fsanitize-address-use-after-scope
build:asan --copt=-fno-omit-frame-pointer
build:asan --action_env=ASAN_OPTIONS=detect_leaks=1:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1
build:asan --action_env=LSAN_OPTIONS=report_objects=1

build:tsan --strip=never
build:tsan --features=tsan
build:tsan --action_env=TSAN_OPTIONS=halt_on_error=1

build:ubsan --strip=never
build:ubsan --features=ubsan
build:ubsan --copt=-fno-omit-frame-pointer
build:ubsan --linkopt=-fsanitize-link-c++-runtime
build:ubsan --host_linkopt=-fsanitize-link-c++-runtime
build:ubsan --action_env=UBSAN_OPTIONS=halt_on_error=1:print_stacktrace=1

build:clang-coverage
build:clang-coverage --action_env=BAZEL_USE_LLVM_NATIVE_COVERAGE=1
build:clang-coverage --experimental_generate_llvm_lcov

build:clang16-coverage --config=clang-coverage
build:clang16-coverage --action_env=BAZEL_LLVM_COV=llvm-cov-16
build:clang16-coverage --action_env=GCOV=llvm-profdata-16

build:clang-tidy --aspects @bazel_clang_tidy//clang_tidy:clang_tidy.bzl%clang_tidy_aspect
build:clang-tidy --output_groups=report
build:clang-tidy --@bazel_clang_tidy//:clang_tidy_config=//:clang_tidy_config
build:clang-tidy --build_tag_filters=-no-clang-tidy

# Fuzzing options
# =========================================================

# https://github.com/bazelbuild/rules_fuzzing says to also set
# @rules_fuzzing//fuzzing:cc_engine_sanitizer=asan or similar which sets things
# like -fsanitize=asan. We don't use this as we set these options ourselves.
# See:
# * https://github.com/bazelbuild/rules_fuzzing/blob/9865504b549e86ccfb4713afcc1914c982567f05/fuzzing/BUILD
# * https://github.com/bazelbuild/rules_fuzzing/blob/9865504b549e86ccfb4713afcc1914c982567f05/fuzzing/private/instrum_opts.bzl

build:libfuzzer --@rules_fuzzing//fuzzing:cc_engine=@rules_fuzzing//fuzzing/engines:libfuzzer
build:libfuzzer --@rules_fuzzing//fuzzing:cc_engine_instrumentation=libfuzzer

build:honggfuzz --@rules_fuzzing//fuzzing:cc_engine=@rules_fuzzing//fuzzing/engines:honggfuzz
build:honggfuzz --@rules_fuzzing//fuzzing:cc_engine_instrumentation=honggfuzz

# Misc configuration
# =========================================================

try-import %workspace%/.bazelrc.local
